/*=========================================================================

Program:   Medical Imaging & Interaction Toolkit
Language:  C++
Date:      $Date$
Version:   $Revision$

Copyright (c) German Cancer Research Center, Division of Medical and
Biological Informatics. All rights reserved.
See MITKCopyright.txt or http://www.mitk.org/copyright.html for details.

This software is distributed WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
/*=========================================================================
 *
 * Surface Mesh Points Selector
 *
 * Cardiac Electromechanics Research Group
 * http://www.cemrgapp.com
 * orod.razeghi@kcl.ac.uk
 *
 * This software is distributed WITHOUT ANY WARRANTY or SUPPORT!
 *
 * =========================================================================*/


#ifndef CemrgMeshPointSelector_h
#define CemrgMeshPointSelector_h

#include <mitkSurface.h>
#include <mitkUnstructuredGrid.h>
#include <mitkImage.h>
#include <vtkSmartPointer.h>
#include <vtkIdList.h>
#include <vtkPoints.h>
#include <vtkPolyData.h>
#include <vtkRegularPolygonSource.h>
#include <QString>
#include <QStringList>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCemrgAppModuleExports.h>

struct PointLabelData {
    int index;                        // Index of the point in the list
    QString pointName;                 // Name of the point
    int pointLabel;                    // Label assigned to the point
    bool labelSet;                     // Whether the label is set
    vtkIdType vtkId;                   // Associated VTK ID
    std::array<double, 3> coordinates; // Point coordinates (x, y, z)

    PointLabelData()
        : index(-1), pointName(""), pointLabel(-1), labelSet(false), vtkId(-1), coordinates{0.0, 0.0, 0.0} {}

    PointLabelData(QString name, int label)
        : index(-1), pointName(name), pointLabel(label), labelSet(false), vtkId(-1), coordinates({0.0, 0.0, 0.0}) {}

    PointLabelData operator =(const PointLabelData& other) {
        index = other.index;
        pointName = other.pointName;
        pointLabel = other.pointLabel;
        labelSet = other.labelSet;
        vtkId = other.vtkId;
        coordinates = other.coordinates;

        return *this;
    }
};

class MITKCEMRGAPPMODULE_EXPORT CemrgMeshPointSelector {
public:
    CemrgMeshPointSelector();

    bool IsEmpty();
    void SetAvailableLabels(QStringList& names, std::vector<int>& labels);
    bool AllLabelsSet();

    int AddPickedIdToLabel(int pickedSeedId, int label);
    void AddPointFromSurface(mitk::Surface::Pointer surface, int pickedSeedId, int label);
    void AddPointFromUnstructuredGrid(mitk::UnstructuredGrid::Pointer grid, int pickedSeedId, int label);

    // both functions go through the set pointDatas and update the vtkId based on the coordinates
    void UpdateVtkIdFromSurface(mitk::Surface::Pointer surface, QStringList names);
    void UpdateVtkIdFromUnstructuredGrid(mitk::UnstructuredGrid::Pointer grid, QStringList names);

    int CleanupLastPoint();
    int UnsetLastPoint(); // returns las label
    void Clear();

    inline vtkSmartPointer<vtkPolyData> GetLineSeeds() { return lineSeeds; };

    std::string ToString();

    PointLabelData GetPointData(QString name);
    inline int FindLabel(QString name);
    int FindIndex(QString name);
    std::vector<double> FindPoint(QString name);

    std::string PrintManyVtx(QStringList names); 
    inline std::string PrintVtxFile(QString name) { return PrintManyVtx(QStringList(name)); };

    std::string PrintManyCoordTxt(QStringList names);
    inline std::string PrintCoordTxtFile(QString name) { return PrintManyCoordTxt(QStringList(name)); }; 

    void SaveToFile(QString path, QStringList names, QString type = "vtx");

    int GetLastLabelIndex();

private:

    // Data members
    vtkSmartPointer<vtkPolyData> lineSeeds;
    std::vector<PointLabelData> pointsData; // Consolidated data for points

};

#endif // CemrgMeshPointSelector_h