/*=========================================================================

Program:   Medical Imaging & Interaction Toolkit
Language:  C++
Date:      $Date$
Version:   $Revision$

Copyright (c) German Cancer Research Center, Division of Medical and
Biological Informatics. All rights reserved.
See MITKCopyright.txt or http://www.mitk.org/copyright.html for details.

This software is distributed WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
/*=========================================================================
 *
 * Surface Mesh Points Selector
 *
 * Cardiac Electromechanics Research Group
 * http://www.cemrgapp.com
 * orod.razeghi@kcl.ac.uk
 *
 * This software is distributed WITHOUT ANY WARRANTY or SUPPORT!
 *
 * =========================================================================*/


#ifndef CemrgMeshPointSelector_h
#define CemrgMeshPointSelector_h

#include <mitkSurface.h>
#include <mitkImage.h>
#include <vtkSmartPointer.h>
#include <vtkIdList.h>
#include <vtkPoints.h>
#include <vtkPolyData.h>
#include <vtkRegularPolygonSource.h>
#include <QString>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCemrgAppModuleExports.h>

class MITKCEMRGAPPMODULE_EXPORT CemrgMeshPointSelector { 
    public :
        CemrgMeshPointSelector();

        void SetAvailableLabels(QStringList names, std::vector<int> labels);
        bool AllLabelsSet();

        void AddPointFromSurface(mitk::Surface::Pointer surface, int pickedSeedId);

        void AddPoint(double *point, int pickedSeedId);
        void PushBackLabel(int label);
        void PushBackLabelFromAvailable(int index);

        int CleanupLastPoint();
        void Clear();

        inline bool IsEmpty() { return seedIds->GetNumberOfIds() == 0; };
        inline int NumIds() { return seedIds->GetNumberOfIds(); };
        inline vtkSmartPointer<vtkPolyData> GetLineSeeds() { return lineSeeds; };

        std::string ToString();

        int FindLabel(QString name);
        int FindIndex(int label);
        std::vector<double> FindPoint(int index);

        std::string PrintVtxFile(QString name);
        std::string PrintCoordTxtFile(QString name);

        void SaveToFile(QString path, Qstring name, QString type = "vtx");

    private :
        std::vector<int> seedLabels;
        vtkSmartPointer<vtkIdList> seedIds;
        vtkSmartPointer<vtkPolyData> lineSeeds;

        QStringList pointNames;
        std::vector<int> availableLabels;
        std::vector<int> labelSet;

        // QStringList saveFiles;
};